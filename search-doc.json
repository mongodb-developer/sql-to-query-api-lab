{"searchDocs":[{"title":"👐 $group","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY","content":"","keywords":"","version":"Next"},{"title":"🎬 How Does $group Work?**​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#-how-does-group-work","content":" The $group stage groups documents based on a field and performs calculations on grouped data.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#syntax","content":" { $group: { _id: &lt;expression&gt;, &lt;field&gt;: { &lt;accumulator&gt;: &lt;expression&gt; } } }   _id: The field to group by (use null to aggregate all documents together).&lt;accumulator&gt;: An aggregation operator ($sum, $avg, $min, $max, $push, $addToSet, etc.).    ","version":"Next","tagName":"h3"},{"title":"👐 Example 1: Count the number of Books published every year​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#-example-1-count-the-number-of-books-published-every-year","content":" ","version":"Next","tagName":"h2"},{"title":"MongoDB Query​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#mongodb-query","content":" db.books.aggregate([ { $group: { _id: &quot;$year&quot;, totalBooks: { $sum: 1 }, }, }, ]);   ","version":"Next","tagName":"h3"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#equivalent-sql-query","content":" SELECT year, COUNT(*) AS totalBooks FROM books GROUP BY year;   ","version":"Next","tagName":"h3"},{"title":"Sample Output​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#sample-output","content":" [ {&quot;_id&quot;: 1980,&quot;totalBooks&quot;: 42}, {&quot;_id&quot;: 2000,&quot;totalBooks&quot;: 490}, {&quot;_id&quot;: 1981,&quot;totalBooks&quot;: 45}, ... ]     ","version":"Next","tagName":"h3"},{"title":"👐 Example 2: Without using $group- count the number of Books published every year​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#-example-2-without-using-group--count-the-number-of-books-published-every-year","content":" ","version":"Next","tagName":"h2"},{"title":"MongoDB Query​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#mongodb-query-1","content":" db.books.aggregate([ { $sortByCount: &quot;$year&quot;, }, ]);   ","version":"Next","tagName":"h3"},{"title":"Sample Output remains the same as before​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#sample-output-remains-the-same-as-before","content":" [ {&quot;_id&quot;: 1980,&quot;totalBooks&quot;: 42}, {&quot;_id&quot;: 2000,&quot;totalBooks&quot;: 490}, {&quot;_id&quot;: 1981,&quot;totalBooks&quot;: 45}, ... ]     ","version":"Next","tagName":"h3"},{"title":"👐 Example 3: Find the Average Book Rating of all books​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#-example-3-find-the-average-book-rating-of-all-books","content":" ","version":"Next","tagName":"h2"},{"title":"MongoDB Query​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#mongodb-query-2","content":" db.reviews.aggregate([ { $group: { _id: &quot;$bookId&quot;, avgRating: { $avg: &quot;$rating&quot; } } }, ]);   ","version":"Next","tagName":"h3"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#equivalent-sql-query-1","content":" SELECT bookId, AVG(rating) AS avgRating FROM reviews GROUP BY bookId;   ","version":"Next","tagName":"h3"},{"title":"Sample Output​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#sample-output-1","content":" [ { &quot;_id&quot;: &quot;1885865171&quot;, &quot;avgRating&quot;: 4.2 }, { &quot;_id&quot;: &quot;0738701688&quot;, &quot;avgRating&quot;: 4.33 }, { &quot;_id&quot;: &quot;0747545448&quot;, &quot;avgRating&quot;: 5 } ]     ","version":"Next","tagName":"h3"},{"title":"👐 Exercise​","type":1,"pageTitle":"👐 $group","url":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY#-exercise","content":" 👐 Find the total number of reviews each book has received. 👐 Get the highest rating given to each book. 👐 Count the number of authors who have written at least one book. ","version":"Next","tagName":"h2"},{"title":"📘 Intro to Aggregation Pipelines","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro","content":"","keywords":"","version":"Next"},{"title":"What is an Aggregation Pipeline?​","type":1,"pageTitle":"📘 Intro to Aggregation Pipelines","url":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro#what-is-an-aggregation-pipeline","content":" The Aggregation Pipeline in MongoDB is a powerful framework for data processing and transformation. It allows you to perform operations like filtering, grouping, sorting, and reshaping data, similar to SQL queries but in a more flexible and scalable way.  In SQL, you achieve complex queries using SELECT, WHERE, GROUP BY, HAVING, and JOIN statements. In MongoDB, aggregation pipelines allow you to achieve the same results by passing data through multiple stages, each performing a specific transformation.    ","version":"Next","tagName":"h3"},{"title":"Why Use Aggregation?​","type":1,"pageTitle":"📘 Intro to Aggregation Pipelines","url":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro#why-use-aggregation","content":" Efficient Processing: Aggregation pipelines process data within the database engine, reducing the need for client-side computations.Scalability: Designed to handle large datasets efficiently.Powerful Transformations: Enables complex data transformations, similar to GROUP BY, JOIN, and computed fields in SQL.    ","version":"Next","tagName":"h3"},{"title":"SQL vs. MongoDB Aggregation Pipeline​","type":1,"pageTitle":"📘 Intro to Aggregation Pipelines","url":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro#sql-vs-mongodb-aggregation-pipeline","content":" SQL Operation\tMongoDB EquivalentWHERE\t$match SELECT column1, column2\t$project ORDER BY\t$sort GROUP BY\t$group HAVING\t$match after $group JOIN\t$lookup    ","version":"Next","tagName":"h3"},{"title":"Basic Structure of an Aggregation Pipeline​","type":1,"pageTitle":"📘 Intro to Aggregation Pipelines","url":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro#basic-structure-of-an-aggregation-pipeline","content":" An aggregation pipeline consists of multiple stages, where each stage processes and transforms the data before passing it to the next stage.   db.collection.aggregate([ { stage1 }, { stage2 }, { stage3 }, ... ])   Each stage uses a specific operator (like $match, $project, or $group) to manipulate the data.    ","version":"Next","tagName":"h3"},{"title":"Example: Aggregation Pipeline Overview​","type":1,"pageTitle":"📘 Intro to Aggregation Pipelines","url":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro#example-aggregation-pipeline-overview","content":" SQL Query:​  SELECT title, available FROM books WHERE available &gt; 5 ORDER BY available DESC;   Equivalent MongoDB Aggregation:​  db.books.aggregate([ { $match: { available: { $gt: 5 } } }, { $project: { title: 1, available: 1, _id: 0 } }, { $sort: { available: -1 } }, ]);     Next, let's dive into individual stages, starting with $match and $project. 🚀 ","version":"Next","tagName":"h3"},{"title":"👐 $match and $project","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/aggregation/match-project","content":"","keywords":"","version":"Next"},{"title":"🔹 $match → Filtering Data​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#-match--filtering-data","content":" Just like .find() based on the query mentioned, the $match stage filters documents from the collection.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#syntax","content":" { $match: { &lt;query&gt; } }   ","version":"Next","tagName":"h3"},{"title":"Example: Get All the Books that were published after the year 2010​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#example-get-all-the-books-that-were-published-after-the-year-2010","content":" db.books.aggregate([ { $match: { year: { $gt: 2010 } }, }, ]);   info Place $match as early as possible in the pipeline to reduce the number of documents processed in later stages.    ","version":"Next","tagName":"h3"},{"title":"🔹 $project → Selecting Fields​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#-project--selecting-fields","content":" The $project stage controls which fields are included in the output.It can also be used for adding computed fields to the results.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#syntax-1","content":" { $project: { field1: 1, field2: 1, _id: 0 } }   1: Include the field0: Exclude the field  ","version":"Next","tagName":"h3"},{"title":"Example: Get all the books published after the year 2010, the output should only include the title, year and page count of the book.​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#example-get-all-the-books-published-after-the-year-2010-the-output-should-only-include-the-title-year-and-page-count-of-the-book","content":" db.books.aggregate([ { $match: { year: { $gt: 2010 } }, }, { $project: { title: 1, year: 1, pages: 1, _id: 0, }, }, ]);   ","version":"Next","tagName":"h3"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#equivalent-sql-query","content":" SELECT title, year, pages FROM books WHERE year&gt;2010;   ","version":"Next","tagName":"h3"},{"title":"Computed Fields Example: Along with the title & authors, also output the count of authors for every book in the database.​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#computed-fields-example-along-with-the-title--authors-also-output-the-count-of-authors-for-every-book-in-the-database","content":" db.books.aggregate([ { $project: { title: 1, authors: 1, authorCount: { $size: &quot;$authors&quot; }, }, }, ]);     ","version":"Next","tagName":"h3"},{"title":"Exercise 🚀​","type":1,"pageTitle":"👐 $match and $project","url":"/sql-to-query-api-lab/docs/aggregation/match-project#exercise-","content":" 👐 Find books with more than 10 available copies. 👐 Return only book titles and publication year. 👐 Create a computed field stockStatus: &quot;In Stock&quot; if available &gt; 0, otherwise &quot;Out of Stock&quot;.    🔹 Next Up: Understanding $group and $sort! ","version":"Next","tagName":"h3"},{"title":"👐 $sort and $limit","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit","content":"","keywords":"","version":"Next"},{"title":"🔹 $sort → Sorting results​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#-sort--sorting-results","content":" ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#syntax","content":" { $sort: { field: 1, } }   { field: 1 } → Ascending order (A → Z, smallest to largest){ field: -1 } → Descending order (Z → A, largest to smallest)You can sort by multiple fields, just like SQL.  ","version":"Next","tagName":"h3"},{"title":"Example: Find the most recent reviews on our app.​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#example-find-the-most-recent-reviews-on-our-app","content":" db.reviews.aggregate([ { $sort: { timestamp: -1 }, }, ]);   ","version":"Next","tagName":"h3"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#equivalent-sql-query","content":" SELECT * FROM books ORDER BY timestamp DESC;     ","version":"Next","tagName":"h3"},{"title":"🔹 $limit → Limiting the number of results​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#-limit--limiting-the-number-of-results","content":" ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#syntax-1","content":" { $limit: n }   n is the maximum number of documents you want in your results  ","version":"Next","tagName":"h3"},{"title":"Example: Find the 5 most recent reviews on our app.​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#example-find-the-5-most-recent-reviews-on-our-app","content":" db.reviews.aggregate([ { $sort: { timestamp: -1 }, }, { $limit: 5, }, ]);   ","version":"Next","tagName":"h3"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#equivalent-sql-query-1","content":" SELECT * FROM books ORDER BY timestamp DESC LIMIT 5;     ","version":"Next","tagName":"h3"},{"title":"👐 Challenge: After the year 2010, which book has the most number of authors.​","type":1,"pageTitle":"👐 $sort and $limit","url":"/sql-to-query-api-lab/docs/aggregation/sort-limit#-challenge-after-the-year-2010-which-book-has-the-most-number-of-authors","content":" Answer db.books.aggregate([ { $match: { year: {$lt: 2010}} }, { $project: { title: 1, authors: 1, numAuthors: {$size: &quot;$authors&quot;}, _id: 0 } }, { $sort: { &quot;numAuthors&quot;: -1} }, { $limit: 1 } ]);  ","version":"Next","tagName":"h3"},{"title":"👐 $merge","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW","content":"","keywords":"","version":"Next"},{"title":"🔹 Understanding $merge​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#-understanding-merge","content":" The $merge stage enables you to store aggregation results into a different collection. If the target collection doesn’t exist, MongoDB will create it automatically.  ","version":"Next","tagName":"h2"},{"title":"Key Features:​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#key-features","content":" ✔️ Inserts new documents if they don’t exist. ✔️ Updates existing documents based on _id or a specified field. ✔️ Can replace, merge, or discard duplicate records. ✔️ Useful for ETL workflows, reporting tables, and maintaining summary data.    ","version":"Next","tagName":"h3"},{"title":"🔹 Syntax​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#-syntax","content":" { $merge: { into: &quot;targetCollection&quot;, on: &quot;_id&quot;, // Field to match existing records whenMatched: &quot;merge&quot;, // Action when a match is found whenNotMatched: &quot;insert&quot; // Action when no match is found } }   into → Specifies the target collection.on → Defines how documents are matched (default: _id).whenMatched → Specifies action when a document with the same key exists. merge: Updates matching documents.replace: Replaces matching documents.keepExisting: Keeps the existing document unchanged.fail: Throws an error on duplicates. whenNotMatched → Specifies action when a match is not found. insert: Inserts new documents.discard: Ignores unmatched documents.fail: Throws an error if a match is not found.    ","version":"Next","tagName":"h2"},{"title":"🔹 Example 1: Creating a Summary Collection​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#-example-1-creating-a-summary-collection","content":" 👉 Suppose we want to generate a collection that contains the total number of books per genre.  db.books.aggregate([ { $unwind: &quot;$genres&quot; }, { $group: { _id: &quot;$genres&quot;, totalBooks: { $sum: 1 } } }, { $merge: { into: &quot;genre_summary&quot;, on: &quot;_id&quot;, whenMatched: &quot;merge&quot;, whenNotMatched: &quot;insert&quot;, }, }, ]);   ","version":"Next","tagName":"h2"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#equivalent-sql-query","content":" INSERT INTO genre_summary (genre, totalBooks) SELECT genre, COUNT(*) FROM books GROUP BY genre ON DUPLICATE KEY UPDATE totalBooks = VALUES(totalBooks);     ","version":"Next","tagName":"h3"},{"title":"🔹 Example 2: Maintaining an Author Summary Table​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#-example-2-maintaining-an-author-summary-table","content":" 👉 We want to create an author_stats collection with the total number of books written by each author.  db.books.aggregate([ { $unwind: &quot;$authors&quot; }, { $group: { _id: &quot;$authors.name&quot;, totalBooks: { $sum: 1 } } }, { $merge: { into: &quot;author_stats&quot;, on: &quot;_id&quot;, whenMatched: &quot;merge&quot;, whenNotMatched: &quot;insert&quot;, }, }, ]);   ","version":"Next","tagName":"h2"},{"title":"SQL Equivalent​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#sql-equivalent","content":" INSERT INTO author_stats (authorName, totalBooks) SELECT authors.name, COUNT(*) FROM books GROUP BY authors.name ON DUPLICATE KEY UPDATE totalBooks = VALUES(totalBooks);     ","version":"Next","tagName":"h3"},{"title":"🔹 Exercise 🚀​","type":1,"pageTitle":"👐 $merge","url":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW#-exercise-","content":" 👐 Create a top_rated_books collection that stores books with an average rating above 4.5. 👐 Maintain a review_stats collection that contains the total number of reviews per book. 👐 Update the borrowed_books_summary collection by storing the total borrowed count for each book.    🚀 Next Up: Optimizing Aggregation Pipelines! ","version":"Next","tagName":"h2"},{"title":"👐 $lookup (JOINs in MongoDB)","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/aggregation/JOIN","content":"","keywords":"","version":"Next"},{"title":"🔹 Understanding $lookup​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#-understanding-lookup","content":" The $lookup stage is used to fetch related documents from another collection, similar to INNER JOIN or LEFT JOIN in SQL.  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#syntax","content":" { $lookup: { from: &quot;&lt;foreign_collection&gt;&quot;, // Collection to join localField: &quot;&lt;local_field&gt;&quot;, // Field in current collection foreignField: &quot;&lt;foreign_field&gt;&quot;, // Field in foreign collection as: &quot;&lt;output_array&gt;&quot; // Output field } }   from: The target collection for joining.localField: The field in the current collection.foreignField: The field in the target collection.as: The output field containing the joined data as an array.    ","version":"Next","tagName":"h3"},{"title":"🔹 Joining 2 collections​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#-joining-2-collections","content":" ","version":"Next","tagName":"h2"},{"title":"👐 Example 1: Joining Authors collection with Books**​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#-example-1-joining-authors-collection-with-books","content":" 🔍 Get book details along with their authors  db.authors.aggregate([ { $lookup: { from: &quot;books&quot;, localField: &quot;books&quot;, foreignField: &quot;_id&quot;, as: &quot;booksWritten&quot;, }, }, ]);   ","version":"Next","tagName":"h3"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#equivalent-sql-query","content":" SELECT books.*, authors.* FROM authors LEFT JOIN books ON authors._id = books.author_id;   info The result in MongoDB will have an array (authorDetails) instead of flat columns.    ","version":"Next","tagName":"h3"},{"title":"🔹 Handling Unwinding ($unwind)​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#-handling-unwinding-unwind","content":" Since $lookup produces an array, we can flatten it using $unwind.  ","version":"Next","tagName":"h2"},{"title":"Example 2: Get Book Titles and Single Author Name​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#example-2-get-book-titles-and-single-author-name","content":" db.authors.aggregate([ { $lookup: { from: &quot;books&quot;, localField: &quot;books&quot;, foreignField: &quot;_id&quot;, as: &quot;booksWritten&quot;, }, }, { $unwind: &quot;$booksWritten&quot; }, { $project: { name: 1, &quot;booksWritten.title&quot;: 1, _id: 0 } }, ]);   info The $lookup operation creates an array within each book document. Using $unwind then flattens this array, resulting in a separate document for every book and each author.    ","version":"Next","tagName":"h3"},{"title":"🚀 Exercise​","type":1,"pageTitle":"👐 $lookup (JOINs in MongoDB)","url":"/sql-to-query-api-lab/docs/aggregation/JOIN#-exercise","content":" 👐 Fetch books with their associated reviews. 👐 Get authors and the books they have written. 👐 Use $unwind to show each book-author pair separately. ","version":"Next","tagName":"h2"},{"title":"👐 UPDATE → updateOne(), updateMany()","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/CRUD/UPDATE","content":"","keywords":"","version":"Next"},{"title":"Syntax​","type":1,"pageTitle":"👐 UPDATE → updateOne(), updateMany()","url":"/sql-to-query-api-lab/docs/CRUD/UPDATE#syntax","content":" db.collection.updateOne( { &lt;query&gt; }, { &lt;update operation&gt; }, { &lt;options&gt; } )   &lt;query&gt;: Specifies which document to update. &lt;update operation&gt;: Defines modifications using update operators like $set, $inc, etc. &lt;options&gt;: (Optional) Allows additional configurations like upsert: true.  ","version":"Next","tagName":"h2"},{"title":"Example: Update a book​","type":1,"pageTitle":"👐 UPDATE → updateOne(), updateMany()","url":"/sql-to-query-api-lab/docs/CRUD/UPDATE#example-update-a-book","content":" db.reviews.updateOne( { bookId: &quot;0312979509&quot; }, // &lt;-- query { $set: { rating: 5 } } // &lt;-- update operation );   ","version":"Next","tagName":"h2"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 UPDATE → updateOne(), updateMany()","url":"/sql-to-query-api-lab/docs/CRUD/UPDATE#equivalent-sql-query","content":" UPDATE reviews SET rating = 5 WHERE bookId = '0312979509';   ","version":"Next","tagName":"h3"},{"title":"Upsert option​","type":1,"pageTitle":"👐 UPDATE → updateOne(), updateMany()","url":"/sql-to-query-api-lab/docs/CRUD/UPDATE#upsert-option","content":" Let's say, we want to update a review in our database from &quot;John&quot; for the book &quot;0312979509&quot; by rating it 5 stars.  db.reviews.updateOne( { name: &quot;John&quot;, bookId: &quot;0312979509&quot; }, { $set: { rating: 5 } } );   Suppose &quot;John&quot; had never posted a review for this book before, the above query won't really do anything. In some cases, we may want to store a fresh new review based on the condition and updates mentioned in query. To handle such scenarios in MongoDB, we don't have to write additional application code to achieve this, all we have to do is- utilize the upsert option.  db.reviews.updateOne( { name: &quot;John&quot;, bookId: &quot;0312979509&quot; }, { $set: { rating: 5 } }, { upsert: true } //&lt;-- option );   info Executing the above command, will insert a fresh new document in the collection like this: { _id: ObjectId('679d...'), bookId: '0312979509', name: 'John', rating: 5 }     ","version":"Next","tagName":"h2"},{"title":"Exercises​","type":1,"pageTitle":"👐 UPDATE → updateOne(), updateMany()","url":"/sql-to-query-api-lab/docs/CRUD/UPDATE#exercises","content":" 👐 Update the pages of &quot;NoSQL Guide&quot; to 450.👐 Update all books published before 2000 to have isClassic: true.👐 What happens if no document matches the update query? ","version":"Next","tagName":"h2"},{"title":"👐 ORDER BY → .sort() & LIMIT → .limit()","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/CRUD/ORDER-BY-SORT","content":"","keywords":"","version":"Next"},{"title":"Sorting in MongoDB​","type":1,"pageTitle":"👐 ORDER BY → .sort() & LIMIT → .limit()","url":"/sql-to-query-api-lab/docs/CRUD/ORDER-BY-SORT#sorting-in-mongodb","content":" { field: 1 } → Ascending order (A → Z, smallest to largest){ field: -1 } → Descending order (Z → A, largest to smallest)You can sort by multiple fields, just like SQL.  ","version":"Next","tagName":"h2"},{"title":"Limiting Results​","type":1,"pageTitle":"👐 ORDER BY → .sort() & LIMIT → .limit()","url":"/sql-to-query-api-lab/docs/CRUD/ORDER-BY-SORT#limiting-results","content":" .limit(n) restricts the number of documents returned.Used together with .sort(), it helps fetch the top N results.    ","version":"Next","tagName":"h2"},{"title":"1: Top 5 Books with the Highest Inventory​","type":1,"pageTitle":"👐 ORDER BY → .sort() & LIMIT → .limit()","url":"/sql-to-query-api-lab/docs/CRUD/ORDER-BY-SORT#1-top-5-books-with-the-highest-inventory","content":" db.books.find().sort({ totalInventory: -1 }).limit(5);   Equivalent SQL Query:  SELECT * FROM books ORDER BY totalInventory DESC LIMIT 5;   This fetches the 5 books with the highest stock.    ","version":"Next","tagName":"h3"},{"title":"2: Get the title of top 10 Fiction Books by highest page count​","type":1,"pageTitle":"👐 ORDER BY → .sort() & LIMIT → .limit()","url":"/sql-to-query-api-lab/docs/CRUD/ORDER-BY-SORT#2-get-the-title-of-top-10-fiction-books-by-highest-page-count","content":" db.books .find({ genres: &quot;Fiction&quot; }, { title: 1, pages: 1 }) .sort({ pages: -1 }) .limit(10);   info Along with the title, we fetched pages as well to ensure that we are getting the right results.  Equivalent SQL Query:  SELECT title, pages FROM books WHERE genres='Fiction' ORDER BY pages DESC LIMIT 10;   This returns the top 10 available books in the &quot;Science Fiction&quot; genre.    ","version":"Next","tagName":"h3"},{"title":"Exercises​","type":1,"pageTitle":"👐 ORDER BY → .sort() & LIMIT → .limit()","url":"/sql-to-query-api-lab/docs/CRUD/ORDER-BY-SORT#exercises","content":" 👐 Retrieve the top 3 books with the most reviews. 👐 Find the first 10 books alphabetically by title. 👐 Get the latest 5 books added to the database (assume a createdAt field). 👐 Find the 2 oldest authors (assume a birthYear field). 👐 Retrieve the top 7 books with the highest rating. ","version":"Next","tagName":"h2"},{"title":"👐 SELECT → projection","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/CRUD/SELECT","content":"","keywords":"","version":"Next"},{"title":"Syntax​","type":1,"pageTitle":"👐 SELECT → projection","url":"/sql-to-query-api-lab/docs/CRUD/SELECT#syntax","content":" db.collection.find({ &lt;query&gt; }, { projection })   ","version":"Next","tagName":"h2"},{"title":"Projection Basics​","type":1,"pageTitle":"👐 SELECT → projection","url":"/sql-to-query-api-lab/docs/CRUD/SELECT#projection-basics","content":" By default, MongoDB returns all fields in a document.Use projection to include (1) or exclude (0) specific fields.The _id field is always included unless explicitly excluded. 1  ","version":"Next","tagName":"h2"},{"title":"Example 1: Retrieve only title and authors fields​","type":1,"pageTitle":"👐 SELECT → projection","url":"/sql-to-query-api-lab/docs/CRUD/SELECT#example-1-retrieve-only-title-and-authors-fields","content":" db.books.find({}, { title: 1, authors: 1, _id: 0 });   Equivalent SQL Query:  SELECT title, authors FROM books;   Here:  {} means &quot;match all documents.&quot;{ title: 1, authors: 1, _id: 0 } specifies that only title and authors should be returned, and _id should be excluded.    ","version":"Next","tagName":"h2"},{"title":"Example 2: Exclude the reviews field​","type":1,"pageTitle":"👐 SELECT → projection","url":"/sql-to-query-api-lab/docs/CRUD/SELECT#example-2-exclude-the-reviews-field","content":" db.books.find({}, { reviews: 0 });   Equivalent SQL Query:  SELECT title, authors, genres, totalInventory, available FROM books;   Here:  We are removing reviews, but all other fields will still appear.    ","version":"Next","tagName":"h2"},{"title":"Example 3: Using Projection along with a Query​","type":1,"pageTitle":"👐 SELECT → projection","url":"/sql-to-query-api-lab/docs/CRUD/SELECT#example-3-using-projection-along-with-a-query","content":" db.books.find({ genres: &quot;Science&quot; }, { title: 1, totalInventory: 1, _id: 0 });   Equivalent SQL Query:  SELECT title, totalInventory FROM books WHERE genres='Science';   Here:  We first filter books that belong to the &quot;Science&quot; genre.We then select only the title and totalInventory fields.    ","version":"Next","tagName":"h2"},{"title":"Exercises​","type":1,"pageTitle":"👐 SELECT → projection","url":"/sql-to-query-api-lab/docs/CRUD/SELECT#exercises","content":" 👐 Retrieve only the title field for all books. 👐 Fetch only title and totalInventory for books with more than 500 pages. 👐 Retrieve all fields except _id and authors for books in the &quot;History&quot; genre. 👐 Find all books written by &quot;Isaac Asimov&quot; and return only title and available copies. 👐 Exclude reviews and attributes from the query results.   ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/intro","content":"Intro Lab goals\tLearn about aggregation pipelines writing aggregation pipelinesWhat you'll learn\tWhat are aggregation pipelines? How are they different from simple MongoDB queries or SQL? How to use simple pipelines to get data, filter it, show the fields needed How to write more advanced pipelines, querying arrays, counting and sorting results How to do JOINs using $lookup How to group data Exporting data How to write aggregations using popular programming languages (TBD) Time to complete\t90 mins In the navigation bar and on some pages, you will notice some icons. Here are their meanings: Icon\tMeaning📘\tLecture material - If you're following along in an instructor-led session, they probably have covered this already. 👐\tHands-on content - Get ready to get some work done. You should follow these steps. 💬\tDiscussion - Item to discuss during the lab 🦸\tAdvanced content - This content isn't covered during the lab, but if you're interested in learning more, you can check it out.","keywords":"","version":"Next"},{"title":"👐 WHERE → .find()","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/CRUD/WHERE","content":"","keywords":"","version":"Next"},{"title":"Syntax​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#syntax","content":" db.collection.find({ &lt;query&gt; })   &lt;query&gt;: Specifies conditions to filter documents.  ","version":"Next","tagName":"h2"},{"title":"Example: Find all books from 2020​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#example-find-all-books-from-2020","content":" db.books.find({ year: 2020 });   ","version":"Next","tagName":"h2"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#equivalent-sql-query","content":" SELECT * FROM books WHERE year = 2020;   ","version":"Next","tagName":"h3"},{"title":"Filtering with find()​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#filtering-with-find","content":" The find() method takes a document as its first argument. This document specifies the filter criteria. You can use a variety of expressions within the filter document:  Comparison Operators: $eq (equals), $ne (not equals), $gt (greater than), $lt (less than), $gte (greater than or equals), $lte (less than or equals), $in (in an array), $nin (not in an array).Logical Operators: $and, $or, $not.Element Operators: $exists (check for field existence), $type (check data type).Evaluation Operators: $regex (regular expression matching), $where (JavaScript code execution).Geo-spatial Operators: For location-based queries.Array Operators: For querying arrays.  Now, let's utilize a few MongoDB operators and create more sophisticated queries:  ","version":"Next","tagName":"h2"},{"title":"$or and $gt operator​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#or-and-gt-operator","content":" Suppose, we want to get all the books written in 2010 OR has more than 200 pages.   SELECT * FROM books WHERE year = 2010 OR pages &gt; 200   Equivalent MongoDB Query:  db.books.find({ $or: [ { year: 2010 }, // &lt;--- 1st condition { pages: { $gt: 200 } }, // &lt;--- 2nd condition ], });   ","version":"Next","tagName":"h3"},{"title":"$and operator​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#and-operator","content":" This time, instead of OR let's query using AND:   SELECT * FROM books WHERE year = 2010 AND pages &gt; 200   Equivalent MongoDB query:  db.books.find({ $and: [ { year: 2010 }, // &lt;--- 1st condition { pages: { $gt: 200 } }, // &lt;--- 2nd condition ], });   ","version":"Next","tagName":"h3"},{"title":"Shorthand $and​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#shorthand-and","content":" When we are querying on 2 different fields and want to utilize $and, we can do so by passing a document with all the conditions like this:  db.books.find({ year: 2010, pages: { $gt: 200 } });   As you can see, we don't have to pass an Array of conditions, MongoDB implicitly considers this as $and.  ","version":"Next","tagName":"h3"},{"title":"👐 Challenge​","type":1,"pageTitle":"👐 WHERE → .find()","url":"/sql-to-query-api-lab/docs/CRUD/WHERE#-challenge","content":" Now, translate the following into a MongoDB Query.  1. Find all books where totalInventory is exactly 5.​  Answer db.books.find({ totalInventory: 5 });   2. Find all books with more than 300 pages.​  Answer db.books.find({ pages: {$gt: 300} });   3. Find books in the &quot;Science&quot; genre that has more than 300 pages.​  Answer db.books.find({ genre: &quot;Science&quot;, pages: {$gt: 300} });  ","version":"Next","tagName":"h2"},{"title":"👐 Quick Start","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/quick-start","content":"","keywords":"","version":"Next"},{"title":"Install Compass​","type":1,"pageTitle":"👐 Quick Start","url":"/sql-to-query-api-lab/docs/quick-start#install-compass","content":" To use work through the exercises, we need to install the official MongoDB GUI: Download and Install Compass  ","version":"Next","tagName":"h2"},{"title":"Connect compass to your Atlas cluster​","type":1,"pageTitle":"👐 Quick Start","url":"/sql-to-query-api-lab/docs/quick-start#connect-compass-to-your-atlas-cluster","content":" Insert Add connection page of compass  ","version":"Next","tagName":"h2"},{"title":"Select the library database​","type":1,"pageTitle":"👐 Quick Start","url":"/sql-to-query-api-lab/docs/quick-start#select-the-library-database","content":" Insert databases list ","version":"Next","tagName":"h2"},{"title":"🎯 Summary","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/summary","content":"🎯 Summary Congratulations! Following this tutorial, you have successfully: TBDTBDTBDTBDTBD Visit the MongoDB Developer Center for more useful information and tutorials.","keywords":"","version":"Next"},{"title":"👐 INSERT → insertOne() & DELETE → deleteOne()","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE","content":"","keywords":"","version":"Next"},{"title":"Example: Insert a new review​","type":1,"pageTitle":"👐 INSERT → insertOne() & DELETE → deleteOne()","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE#example-insert-a-new-review","content":" db.reviews.insertOne({ text: &quot;Best book I have ever read.&quot;, rating: 5, name: &quot;Jack&quot;, bookId: &quot;0786222727&quot;, });   ","version":"Next","tagName":"h2"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 INSERT → insertOne() & DELETE → deleteOne()","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE#equivalent-sql-query","content":" INSERT INTO reviews (text, rating, name, bookId) VALUES ('Best book I have ever read.', 5, 'Jack', '0786222727');   ","version":"Next","tagName":"h3"},{"title":"Example: Insert multiple reviews​","type":1,"pageTitle":"👐 INSERT → insertOne() & DELETE → deleteOne()","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE#example-insert-multiple-reviews","content":" db.reviews.insertMany([ { text: &quot;Amazing plot.&quot;, rating: 5, name: &quot;John&quot;, bookId: &quot;0786222727&quot;, }, { text: &quot;Over-hyped, tbh I feel it's very boring!&quot;, rating: 2, name: &quot;Nick&quot;, bookId: &quot;0786222727&quot;, }, ]);   ","version":"Next","tagName":"h2"},{"title":"Example: Delete one review​","type":1,"pageTitle":"👐 INSERT → insertOne() & DELETE → deleteOne()","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE#example-delete-one-review","content":" db.reviews.deleteOne({ bookId: &quot;0786222727&quot;, });   ","version":"Next","tagName":"h2"},{"title":"Equivalent SQL Query​","type":1,"pageTitle":"👐 INSERT → insertOne() & DELETE → deleteOne()","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE#equivalent-sql-query-1","content":" DELETE FROM reviews WHERE bookId = '0786222727';   ","version":"Next","tagName":"h3"},{"title":"Exercises​","type":1,"pageTitle":"👐 INSERT → insertOne() & DELETE → deleteOne()","url":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE#exercises","content":" 👐 Insert 4 more reviews for bookId &quot;0786222727&quot;.👐 Delete all the reviews for bookId &quot;0786222727&quot; through a single command. ","version":"Next","tagName":"h2"},{"title":"👐 Set Up Lab","type":0,"sectionRef":"#","url":"/sql-to-query-api-lab/docs/prerequisites/prerequisite","content":"👐 Set Up Lab To follow along, you'll need to complete the first two labs of the MongoDB for RDBMS professionals. Which will help you in getting: MongoDB Atlas ClusterTest data. In this case, this is book, author, and review data for a library management system. 👐 To get both, open the intro lab and follow it (only takes 10-15 mins) to get your database ready. Return here when finished!","keywords":"","version":"Next"}],"options":{"id":"default"}}