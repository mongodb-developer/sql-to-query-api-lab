"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["3661"],{8488:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>i,assets:()=>d,toc:()=>t,contentTitle:()=>l});var i=JSON.parse('{"id":"CRUD/WHERE","title":"\uD83D\uDC50 WHERE \u2192 .find()","description":"Similar to SQL\'s WHERE clause, the .find() method in MongoDB retrieves documents from a collection that match a specified query.","source":"@site/docs/40-CRUD/1-WHERE.mdx","sourceDirName":"40-CRUD","slug":"/CRUD/WHERE","permalink":"/sql-to-query-api-lab/docs/CRUD/WHERE","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/40-CRUD/1-WHERE.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 CRUD operations","permalink":"/sql-to-query-api-lab/docs/category/-crud-operations"},"next":{"title":"\uD83D\uDC50 SELECT \u2192 projection","permalink":"/sql-to-query-api-lab/docs/CRUD/SELECT"}}'),r=s("5893"),o=s("65");let a={},l="\uD83D\uDC50 WHERE \u2192 .find()",d={},t=[{value:"Syntax",id:"syntax",level:2},{value:"Example: Find all books from 2020",id:"example-find-all-books-from-2020",level:2},{value:"Equivalent SQL Query",id:"equivalent-sql-query",level:3},{value:"Filtering with <code>find()</code>",id:"filtering-with-find",level:2},{value:"$or and $gt operator",id:"or-and-gt-operator",level:3},{value:"$and operator",id:"and-operator",level:3},{value:"Shorthand $and",id:"shorthand-and",level:3},{value:"\uD83D\uDC50 Challenge",id:"-challenge",level:2},{value:"1. Find all books where <code>totalInventory</code> is exactly 5.",id:"1-find-all-books-where-totalinventory-is-exactly-5",level:4},{value:"2. Find all books with more than 300 pages.",id:"2-find-all-books-with-more-than-300-pages",level:4},{value:"3. Find books in the &quot;Science&quot; genre that has more than 300 pages.",id:"3-find-books-in-the-science-genre-that-has-more-than-300-pages",level:4}];function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-where--find",children:"\uD83D\uDC50 WHERE \u2192 .find()"})}),"\n",(0,r.jsxs)(n.p,{children:["Similar to SQL's ",(0,r.jsx)(n.code,{children:"WHERE"})," clause, the ",(0,r.jsx)(n.code,{children:".find()"})," method in MongoDB retrieves documents from a collection that match a specified query."]}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.collection.find({ <query> })\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<query>"}),": Specifies conditions to filter documents."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-find-all-books-from-2020",children:"Example: Find all books from 2020"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.books.find({ year: 2020 });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-sql-query",children:"Equivalent SQL Query"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM books WHERE year = 2020;\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"filtering-with-find",children:["Filtering with ",(0,r.jsx)(n.code,{children:"find()"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"find()"})," method takes a document as its first argument. This document specifies the filter criteria. You can use a variety of expressions within the filter document:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comparison Operators:"})," ",(0,r.jsx)(n.code,{children:"$eq"})," (equals), ",(0,r.jsx)(n.code,{children:"$ne"})," (not equals), ",(0,r.jsx)(n.code,{children:"$gt"})," (greater than), ",(0,r.jsx)(n.code,{children:"$lt"})," (less than), ",(0,r.jsx)(n.code,{children:"$gte"})," (greater than or equals), ",(0,r.jsx)(n.code,{children:"$lte"})," (less than or equals), ",(0,r.jsx)(n.code,{children:"$in"})," (in an array), ",(0,r.jsx)(n.code,{children:"$nin"})," (not in an array)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logical Operators:"})," ",(0,r.jsx)(n.code,{children:"$and"}),", ",(0,r.jsx)(n.code,{children:"$or"}),", ",(0,r.jsx)(n.code,{children:"$not"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Element Operators:"})," ",(0,r.jsx)(n.code,{children:"$exists"})," (check for field existence), ",(0,r.jsx)(n.code,{children:"$type"})," (check data type)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Evaluation Operators:"})," ",(0,r.jsx)(n.code,{children:"$regex"})," (regular expression matching), ",(0,r.jsx)(n.code,{children:"$where"})," (JavaScript code execution)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Geo-spatial Operators:"})," For location-based queries."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Array Operators:"})," For querying arrays."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Now, let's utilize a few MongoDB operators and create more sophisticated queries:"}),"\n",(0,r.jsx)(n.h3,{id:"or-and-gt-operator",children:"$or and $gt operator"}),"\n",(0,r.jsx)(n.p,{children:"Suppose, we want to get all the books written in 2010 OR has more than 200 pages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"  SELECT * FROM books WHERE year = 2010 OR pages > 200\n"})}),"\n",(0,r.jsx)(n.p,{children:"Equivalent MongoDB Query:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.books.find({\n  $or: [\n    { year: 2010 }, // <--- 1st condition\n    { pages: { $gt: 200 } }, // <--- 2nd condition\n  ],\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"and-operator",children:"$and operator"}),"\n",(0,r.jsx)(n.p,{children:"This time, instead of OR let's query using AND:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"  SELECT * FROM books WHERE year = 2010 AND pages > 200\n"})}),"\n",(0,r.jsx)(n.p,{children:"Equivalent MongoDB query:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.books.find({\n  $and: [\n    { year: 2010 }, // <--- 1st condition\n    { pages: { $gt: 200 } }, // <--- 2nd condition\n  ],\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"shorthand-and",children:"Shorthand $and"}),"\n",(0,r.jsx)(n.p,{children:"When we are querying on 2 different fields and want to utilize $and, we can do so by passing a document with all the conditions like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.books.find({ year: 2010, pages: { $gt: 200 } });\n"})}),"\n",(0,r.jsx)(n.p,{children:"As you can see, we don't have to pass an Array of conditions, MongoDB implicitly considers this as $and."}),"\n",(0,r.jsx)(n.h2,{id:"-challenge",children:"\uD83D\uDC50 Challenge"}),"\n",(0,r.jsx)(n.p,{children:"Now, translate the following into a MongoDB Query."}),"\n",(0,r.jsxs)(n.h4,{id:"1-find-all-books-where-totalinventory-is-exactly-5",children:["1. Find all books where ",(0,r.jsx)(n.code,{children:"totalInventory"})," is exactly 5."]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  db.books.find({ totalInventory: 5 });\n"})})})]}),"\n",(0,r.jsx)(n.h4,{id:"2-find-all-books-with-more-than-300-pages",children:"2. Find all books with more than 300 pages."}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  db.books.find({ pages: {$gt: 300} });\n"})})})]}),"\n",(0,r.jsx)(n.h4,{id:"3-find-books-in-the-science-genre-that-has-more-than-300-pages",children:'3. Find books in the "Science" genre that has more than 300 pages.'}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'  db.books.find({ genre: "Science", pages: {$gt: 300} });\n'})})})]})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);