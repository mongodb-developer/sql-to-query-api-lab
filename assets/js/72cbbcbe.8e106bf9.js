"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["7495"],{2735:function(e,n,o){o.r(n),o.d(n,{default:()=>h,frontMatter:()=>r,metadata:()=>i,assets:()=>a,toc:()=>d,contentTitle:()=>t});var i=JSON.parse('{"id":"aggregation/JOIN","title":"\uD83D\uDC50 $lookup (JOINs in MongoDB)","description":"$lookup in MongoDB serves a similar purpose to JOINs in SQL. It enables combining data from multiple collections by performing an equality match between fields.","source":"@site/docs/50-aggregation/5-JOIN.mdx","sourceDirName":"50-aggregation","slug":"/aggregation/JOIN","permalink":"/sql-to-query-api-lab/docs/aggregation/JOIN","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/50-aggregation/5-JOIN.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 $group","permalink":"/sql-to-query-api-lab/docs/aggregation/group"},"next":{"title":"\uD83D\uDC50 $merge","permalink":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW"}}'),l=o("5893"),s=o("65");let r={},t="\uD83D\uDC50 $lookup (JOINs in MongoDB)",a={},d=[{value:"<strong>\uD83D\uDD39 Understanding $lookup</strong>",id:"-understanding-lookup",level:2},{value:"<strong>Syntax</strong>",id:"syntax",level:3},{value:"\uD83D\uDD39 Joining 2 collections",id:"-joining-2-collections",level:2},{value:"\uD83D\uDC50 Example 1: Joining Authors collection with Books",id:"-example-1-joining-authors-collection-with-books",level:3},{value:"<strong>Equivalent SQL Query</strong>",id:"equivalent-sql-query",level:3},{value:"\uD83D\uDD39 Handling Unwinding ($unwind)",id:"-handling-unwinding-unwind",level:2},{value:"Example 2: Get Only Book Titles and Single Author Name",id:"example-2-get-only-book-titles-and-single-author-name",level:3},{value:"\uD83D\uDC50 Challenge",id:"-challenge",level:2},{value:"\uD83D\uDC50 1. Fetch books with their associated reviews",id:"-1-fetch-books-with-their-associated-reviews",level:3}];function c(e){let n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:o}=n;return o||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"-lookup-joins-in-mongodb",children:"\uD83D\uDC50 $lookup (JOINs in MongoDB)"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"$lookup"})," in MongoDB serves a similar purpose to ",(0,l.jsx)(n.strong,{children:"JOINs"})," in SQL. It enables combining data from multiple collections by performing an equality match between fields."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-understanding-lookup",children:(0,l.jsx)(n.strong,{children:"\uD83D\uDD39 Understanding $lookup"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"$lookup"})," stage is used to fetch related documents from another collection, similar to ",(0,l.jsx)(n.code,{children:"INNER JOIN"})," or ",(0,l.jsx)(n.code,{children:"LEFT JOIN"})," in SQL."]}),"\n",(0,l.jsx)(n.h3,{id:"syntax",children:(0,l.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'{\n  $lookup: {\n    from: "<foreign_collection>",  // Collection to join\n    localField: "<local_field>",   // Field in current collection\n    foreignField: "<foreign_field>", // Field in foreign collection\n    as: "<output_array>"             // Output field\n  }\n}\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"from"}),": The target collection for joining."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"localField"}),": The field in the current collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"foreignField"}),": The field in the target collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"as"}),": The output field containing the joined data as an array."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-joining-2-collections",children:"\uD83D\uDD39 Joining 2 collections"}),"\n",(0,l.jsx)(n.h3,{id:"-example-1-joining-authors-collection-with-books",children:"\uD83D\uDC50 Example 1: Joining Authors collection with Books"}),"\n",(0,l.jsx)(n.p,{children:"\uD83D\uDD0D Get book details along with their authors"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([\n  {\n    $lookup: {\n      from: "books",\n      localField: "books",\n      foreignField: "_id",\n      as: "booksWritten",\n    },\n  },\n]);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"equivalent-sql-query",children:(0,l.jsx)(n.strong,{children:"Equivalent SQL Query"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SELECT books.*, authors.*\nFROM authors\nLEFT JOIN books ON authors._id = books.author_id;\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["The result in MongoDB will have an array (",(0,l.jsx)(n.code,{children:"authorDetails"}),") instead of flat columns."]})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-handling-unwinding-unwind",children:"\uD83D\uDD39 Handling Unwinding ($unwind)"}),"\n",(0,l.jsxs)(n.p,{children:["Since ",(0,l.jsx)(n.code,{children:"$lookup"})," produces an ",(0,l.jsx)(n.strong,{children:"array"}),", we can flatten it using ",(0,l.jsx)(n.code,{children:"$unwind"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"example-2-get-only-book-titles-and-single-author-name",children:"Example 2: Get Only Book Titles and Single Author Name"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'db.authors.aggregate([\n  {\n    $lookup: {\n      from: "books",\n      localField: "books",\n      foreignField: "_id",\n      as: "booksWritten",\n    },\n  },\n  { $unwind: "$booksWritten" },\n  { $project: { name: 1, "booksWritten.title": 1, _id: 0 } },\n]);\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsx)(n.p,{children:"The $lookup operation creates an array within each book document. Using $unwind then flattens this array, resulting in a separate document for every single book - author pair."})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"-challenge",children:"\uD83D\uDC50 Challenge"}),"\n",(0,l.jsx)(n.h3,{id:"-1-fetch-books-with-their-associated-reviews",children:"\uD83D\uDC50 1. Fetch books with their associated reviews"}),"\n",(0,l.jsxs)(o,{children:[(0,l.jsx)("summary",{children:"Answer"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  {\n    $lookup:\n      {\n        from: "reviews",\n        localField: "_id",\n        foreignField: "bookId",\n        as: "reviews"\n      }\n  }\n]);\n'})})]})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);