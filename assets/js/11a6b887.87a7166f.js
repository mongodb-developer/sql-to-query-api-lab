"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["2503"],{5566:function(e,n,o){o.r(n),o.d(n,{default:()=>g,frontMatter:()=>t,metadata:()=>r,assets:()=>i,toc:()=>d,contentTitle:()=>l});var r=JSON.parse('{"id":"aggregation/GROUP-BY","title":"\uD83D\uDC50 $group","description":"In SQL, the GROUP BY statement groups rows that have the same values into summary rows, like \\"find the number of customers in each country\\".","source":"@site/docs/50-aggregation/4-GROUP-BY.mdx","sourceDirName":"50-aggregation","slug":"/aggregation/GROUP-BY","permalink":"/sql-to-query-api-lab/docs/aggregation/GROUP-BY","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/50-aggregation/4-GROUP-BY.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 $sort and $limit","permalink":"/sql-to-query-api-lab/docs/aggregation/sort-limit"},"next":{"title":"\uD83D\uDC50 $lookup (JOINs in MongoDB)","permalink":"/sql-to-query-api-lab/docs/aggregation/JOIN"}}'),s=o("5893"),a=o("65");let t={},l="\uD83D\uDC50 $group",i={},d=[{value:"\uD83C\uDFAC How Does $group Work?**",id:"-how-does-group-work",level:2},{value:"<strong>Syntax</strong>",id:"syntax",level:3},{value:"\uD83D\uDC50 Example 1: Count the number of Books published every year",id:"-example-1-count-the-number-of-books-published-every-year",level:2},{value:"<strong>MongoDB Query</strong>",id:"mongodb-query",level:3},{value:"<strong>Equivalent SQL Query</strong>",id:"equivalent-sql-query",level:3},{value:"<strong>Sample Output</strong>",id:"sample-output",level:3},{value:"\uD83D\uDC50 Example 2: Without using <code>$group</code>- count the number of Books published every year",id:"-example-2-without-using-group--count-the-number-of-books-published-every-year",level:2},{value:"MongoDB Query",id:"mongodb-query-1",level:3},{value:"Sample Output remains the same as before",id:"sample-output-remains-the-same-as-before",level:3},{value:"\uD83D\uDC50 Example 3: Find the Average Book Rating of all books",id:"-example-3-find-the-average-book-rating-of-all-books",level:2},{value:"<strong>MongoDB Query</strong>",id:"mongodb-query-2",level:3},{value:"Equivalent SQL Query",id:"equivalent-sql-query-1",level:3},{value:"Sample Output",id:"sample-output-1",level:3},{value:"\uD83D\uDC50 Exercise",id:"-exercise",level:2}];function u(e){let n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-group",children:"\uD83D\uDC50 $group"})}),"\n",(0,s.jsx)(n.p,{children:'In SQL, the GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".\nThe GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.'}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"$group"})," stage in MongoDB\u2019s Aggregation Framework is equivalent to ",(0,s.jsx)(n.code,{children:"GROUP BY"})," in SQL. It allows us to group documents by a specific field and apply aggregate functions like sum, average, count, min, and max."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-how-does-group-work",children:"\uD83C\uDFAC How Does $group Work?**"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"$group"})," stage groups documents based on a field and performs calculations on grouped data."]}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:(0,s.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"{\n  $group: {\n    _id: <expression>,\n    <field>: { <accumulator>: <expression> }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_id"}),": The field to group by (use ",(0,s.jsx)(n.code,{children:"null"})," to aggregate all documents together)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<accumulator>"}),": An aggregation operator (",(0,s.jsx)(n.code,{children:"$sum"}),", ",(0,s.jsx)(n.code,{children:"$avg"}),", ",(0,s.jsx)(n.code,{children:"$min"}),", ",(0,s.jsx)(n.code,{children:"$max"}),", ",(0,s.jsx)(n.code,{children:"$push"}),", ",(0,s.jsx)(n.code,{children:"$addToSet"}),", etc.)."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-example-1-count-the-number-of-books-published-every-year",children:"\uD83D\uDC50 Example 1: Count the number of Books published every year"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-query",children:(0,s.jsx)(n.strong,{children:"MongoDB Query"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  {\n    $group: {\n      _id: "$year",\n      totalBooks: { $sum: 1 },\n    },\n  },\n]);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"equivalent-sql-query",children:(0,s.jsx)(n.strong,{children:"Equivalent SQL Query"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT year, COUNT(*) AS totalBooks\nFROM books\nGROUP BY year;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sample-output",children:(0,s.jsx)(n.strong,{children:"Sample Output"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {"_id": 1980,"totalBooks": 42},\n  {"_id": 2000,"totalBooks": 490},\n  {"_id": 1981,"totalBooks": 45},\n  ...\n]\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"-example-2-without-using-group--count-the-number-of-books-published-every-year",children:["\uD83D\uDC50 Example 2: Without using ",(0,s.jsx)(n.code,{children:"$group"}),"- count the number of Books published every year"]}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-query-1",children:"MongoDB Query"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  {\n    $sortByCount: "$year",\n  },\n]);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sample-output-remains-the-same-as-before",children:"Sample Output remains the same as before"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {"_id": 1980,"totalBooks": 42},\n  {"_id": 2000,"totalBooks": 490},\n  {"_id": 1981,"totalBooks": 45},\n  ...\n]\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-example-3-find-the-average-book-rating-of-all-books",children:"\uD83D\uDC50 Example 3: Find the Average Book Rating of all books"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-query-2",children:(0,s.jsx)(n.strong,{children:"MongoDB Query"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'db.reviews.aggregate([\n  { $group: { _id: "$bookId", avgRating: { $avg: "$rating" } } },\n]);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"equivalent-sql-query-1",children:"Equivalent SQL Query"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT bookId, AVG(rating) AS avgRating\nFROM reviews\nGROUP BY bookId;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sample-output-1",children:"Sample Output"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  { "_id": "1885865171", "avgRating": 4.2 },\n  { "_id": "0738701688", "avgRating": 4.33 },\n  { "_id": "0747545448", "avgRating": 5 }\n]\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-exercise",children:"\uD83D\uDC50 Exercise"}),"\n",(0,s.jsxs)(n.p,{children:["\uD83D\uDC50 Find the total number of reviews each book has received.",(0,s.jsx)(n.br,{}),"\n","\uD83D\uDC50 Get the highest rating given to each book.",(0,s.jsx)(n.br,{}),"\n","\uD83D\uDC50 Count the number of authors who have written at least one book."]})]})}function g(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);