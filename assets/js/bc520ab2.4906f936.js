"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["3993"],{956:function(e,l,n){n.r(l),n.d(l,{default:()=>h,frontMatter:()=>o,metadata:()=>s,assets:()=>d,toc:()=>c,contentTitle:()=>t});var s=JSON.parse('{"id":"CRUD/SELECT","title":"\uD83D\uDC50 SELECT \u2192 projection","description":"In SQL, the SELECT statement allows us to specify which columns to retrieve from a table. Similarly, in MongoDB, we use projection in the .find() method to control which fields to include (or exclude) in query results.","source":"@site/docs/40-CRUD/2-SELECT.mdx","sourceDirName":"40-CRUD","slug":"/CRUD/SELECT","permalink":"/sql-to-query-api-lab/docs/CRUD/SELECT","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/40-CRUD/2-SELECT.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 WHERE \u2192 .find()","permalink":"/sql-to-query-api-lab/docs/CRUD/WHERE"},"next":{"title":"\uD83D\uDC50 ORDER BY \u2192 .sort() & LIMIT \u2192 .limit()","permalink":"/sql-to-query-api-lab/docs/CRUD/ORDER-LIMIT"}}'),i=n("5893"),r=n("65");let o={},t="\uD83D\uDC50 SELECT \u2192 projection",d={},c=[{value:"Syntax",id:"syntax",level:2},{value:"<strong>Projection basics</strong>",id:"projection-basics",level:2},{value:"<strong>Example 1: Retrieve only <code>title</code> and <code>authors</code> fields</strong>",id:"example-1-retrieve-only-title-and-authors-fields",level:2},{value:"<strong>Example 2: Exclude the <code>reviews</code> field</strong>",id:"example-2-exclude-the-reviews-field",level:2},{value:"<strong>Example 3: Using projection along with a query</strong>",id:"example-3-using-projection-along-with-a-query",level:2},{value:"<strong>Challenge</strong>",id:"challenge",level:2},{value:"\uD83D\uDC50 1. Retrieve only the <code>title</code> field for all books.",id:"-1-retrieve-only-the-title-field-for-all-books",level:3},{value:"\uD83D\uDC50 2. Retrieve all fields except <code>_id</code> and <code>authors</code> for books in the &quot;History&quot; genre.",id:"-2-retrieve-all-fields-except-_id-and-authors-for-books-in-the-history-genre",level:3}];function a(e){let l={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:n}=l;return n||function(e,l){throw Error("Expected "+(l?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.header,{children:(0,i.jsx)(l.h1,{id:"-select--projection",children:"\uD83D\uDC50 SELECT \u2192 projection"})}),"\n",(0,i.jsxs)(l.p,{children:["In SQL, the ",(0,i.jsx)(l.code,{children:"SELECT"})," statement allows us to specify which columns to retrieve from a table. Similarly, in MongoDB, we use ",(0,i.jsx)(l.strong,{children:"projection"})," in the ",(0,i.jsx)(l.code,{children:".find()"})," method to control which fields to include (or exclude) in query results."]}),"\n",(0,i.jsx)(l.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-js",children:"db.collection.find({ <query> }, { projection })\n"})}),"\n",(0,i.jsx)(l.h2,{id:"projection-basics",children:(0,i.jsx)(l.strong,{children:"Projection basics"})}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:"By default, MongoDB returns all fields in a document."}),"\n",(0,i.jsxs)(l.li,{children:["Use projection to ",(0,i.jsx)(l.strong,{children:"include (1)"})," or ",(0,i.jsx)(l.strong,{children:"exclude (0)"})," specific fields."]}),"\n",(0,i.jsxs)(l.li,{children:["The ",(0,i.jsx)(l.code,{children:"_id"})," field is always included unless explicitly excluded.\n1"]}),"\n"]}),"\n",(0,i.jsx)(l.h2,{id:"example-1-retrieve-only-title-and-authors-fields",children:(0,i.jsxs)(l.strong,{children:["Example 1: Retrieve only ",(0,i.jsx)(l.code,{children:"title"})," and ",(0,i.jsx)(l.code,{children:"authors"})," fields"]})}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-js",children:"db.books.find({}, { title: 1, authors: 1, _id: 0 });\n"})}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.strong,{children:"Equivalent SQL query:"})}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-sql",children:"SELECT title, authors FROM books;\n"})}),"\n",(0,i.jsx)(l.p,{children:"Here:"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"{}"}),' means "match all documents."']}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"{ title: 1, authors: 1, _id: 0 }"})," specifies that only ",(0,i.jsx)(l.code,{children:"title"})," and ",(0,i.jsx)(l.code,{children:"authors"})," should be returned, and ",(0,i.jsx)(l.code,{children:"_id"})," should be excluded."]}),"\n"]}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h2,{id:"example-2-exclude-the-reviews-field",children:(0,i.jsxs)(l.strong,{children:["Example 2: Exclude the ",(0,i.jsx)(l.code,{children:"reviews"})," field"]})}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-js",children:"db.books.find({}, { reviews: 0 });\n"})}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.strong,{children:"Equivalent SQL query:"})}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-sql",children:"SELECT title, authors, genres, totalInventory, available FROM books;\n"})}),"\n",(0,i.jsx)(l.p,{children:"Here:"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["We are removing ",(0,i.jsx)(l.code,{children:"reviews"}),", but all other fields will still appear."]}),"\n"]}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h2,{id:"example-3-using-projection-along-with-a-query",children:(0,i.jsx)(l.strong,{children:"Example 3: Using projection along with a query"})}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-js",children:'db.books.find({ genres: "Science" }, { title: 1, totalInventory: 1, _id: 0 });\n'})}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.strong,{children:"Equivalent SQL query:"})}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-sql",children:"SELECT title, totalInventory FROM books WHERE genres='Science';\n"})}),"\n",(0,i.jsx)(l.p,{children:"Here:"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:["We first ",(0,i.jsx)(l.strong,{children:"filter"}),' books that belong to the "Science" genre.']}),"\n",(0,i.jsxs)(l.li,{children:["We then ",(0,i.jsx)(l.strong,{children:"select only"})," the ",(0,i.jsx)(l.code,{children:"title"})," and ",(0,i.jsx)(l.code,{children:"totalInventory"})," fields."]}),"\n"]}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h2,{id:"challenge",children:(0,i.jsx)(l.strong,{children:"Challenge"})}),"\n",(0,i.jsxs)(l.h3,{id:"-1-retrieve-only-the-title-field-for-all-books",children:["\uD83D\uDC50 1. Retrieve only the ",(0,i.jsx)(l.code,{children:"title"})," field for all books."]}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Answer"}),(0,i.jsx)("div",{children:(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-js",children:"  db.books.find({}, {title: 1, _id: 0});\n"})})})]}),"\n",(0,i.jsxs)(l.h3,{id:"-2-retrieve-all-fields-except-_id-and-authors-for-books-in-the-history-genre",children:["\uD83D\uDC50 2. Retrieve all fields except ",(0,i.jsx)(l.code,{children:"_id"})," and ",(0,i.jsx)(l.code,{children:"authors"}),' for books in the "History" genre.']}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Answer"}),(0,i.jsx)("div",{children:(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-js",children:'  db.books.find({genres: "History"}, {_id: 0, authors: 0});\n'})})})]})]})}function h(e={}){let{wrapper:l}={...(0,r.a)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);