"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["9758"],{6926:function(e,t,n){n.r(t),n.d(t,{default:()=>c,frontMatter:()=>s,metadata:()=>a,assets:()=>i,toc:()=>d,contentTitle:()=>l});var a=JSON.parse('{"id":"aggregation/match-project","title":"\uD83D\uDC50 $match and $project","description":"MongoDB\u2019s Aggregation Framework allows for powerful data transformations and analysis. The $match, $project & $sort stages are fundamental building blocks of an aggregation pipeline.","source":"@site/docs/50-aggregation/2-match-project.mdx","sourceDirName":"50-aggregation","slug":"/aggregation/match-project","permalink":"/sql-to-query-api-lab/docs/aggregation/match-project","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/50-aggregation/2-match-project.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDCD8 Intro to Aggregation Pipelines","permalink":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro"},"next":{"title":"\uD83D\uDC50 $sort and $limit","permalink":"/sql-to-query-api-lab/docs/aggregation/sort-limit"}}'),r=n("5893"),o=n("65");let s={},l="\uD83D\uDC50 $match and $project",i={},d=[{value:"<strong>\uD83D\uDD39 $match \u2192 Filtering Data</strong>",id:"-match--filtering-data",level:2},{value:"<strong>Syntax</strong>",id:"syntax",level:3},{value:"Example: Get All the Books that were published after the year 2010",id:"example-get-all-the-books-that-were-published-after-the-year-2010",level:3},{value:"<strong>\uD83D\uDD39 $project \u2192 Selecting Fields</strong>",id:"-project--selecting-fields",level:2},{value:"<strong>Syntax</strong>",id:"syntax-1",level:3},{value:"Example: Get all the books published after the year 2010, the output should only include the title, year and page count of the book.",id:"example-get-all-the-books-published-after-the-year-2010-the-output-should-only-include-the-title-year-and-page-count-of-the-book",level:3},{value:"<strong>Equivalent SQL Query</strong>",id:"equivalent-sql-query",level:3},{value:"<strong>Computed Fields Example:</strong> Along with the title &amp; authors, also output the count of authors for every book in the database.",id:"computed-fields-example-along-with-the-title--authors-also-output-the-count-of-authors-for-every-book-in-the-database",level:3},{value:"<strong>Exercise \uD83D\uDE80</strong>",id:"exercise-",level:3}];function h(e){let t={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"-match-and-project",children:"\uD83D\uDC50 $match and $project"})}),"\n",(0,r.jsxs)(t.p,{children:["MongoDB\u2019s ",(0,r.jsx)(t.strong,{children:"Aggregation Framework"})," allows for powerful data transformations and analysis. The ",(0,r.jsx)(t.strong,{children:"$match"}),", ",(0,r.jsx)(t.strong,{children:"$project"})," & ",(0,r.jsx)(t.strong,{children:"$sort"})," stages are fundamental building blocks of an aggregation pipeline."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-match--filtering-data",children:(0,r.jsx)(t.strong,{children:"\uD83D\uDD39 $match \u2192 Filtering Data"})}),"\n",(0,r.jsxs)(t.p,{children:["Just like ",(0,r.jsx)(t.code,{children:".find()"})," based on the query mentioned, the ",(0,r.jsx)(t.code,{children:"$match"})," stage filters documents from the collection."]}),"\n",(0,r.jsx)(t.h3,{id:"syntax",children:(0,r.jsx)(t.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"{ $match: { <query> } }\n"})}),"\n",(0,r.jsx)(t.h3,{id:"example-get-all-the-books-that-were-published-after-the-year-2010",children:"Example: Get All the Books that were published after the year 2010"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { year: { $gt: 2010 } },\n  },\n]);\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Place ",(0,r.jsx)(t.code,{children:"$match"})," as early as possible in the pipeline to reduce the number of documents processed in later stages."]})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"-project--selecting-fields",children:(0,r.jsx)(t.strong,{children:"\uD83D\uDD39 $project \u2192 Selecting Fields"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"$project"})," stage controls which fields are included in the output."]}),"\n",(0,r.jsx)(t.li,{children:"It can also be used for adding computed fields to the results."}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"syntax-1",children:(0,r.jsx)(t.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"{\n  $project: {\n    field1: 1,\n    field2: 1,\n    _id: 0\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"1"}),": Include the field"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"0"}),": Exclude the field"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example-get-all-the-books-published-after-the-year-2010-the-output-should-only-include-the-title-year-and-page-count-of-the-book",children:"Example: Get all the books published after the year 2010, the output should only include the title, year and page count of the book."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"db.books.aggregate([\n  {\n    $match: { year: { $gt: 2010 } },\n  },\n  {\n    $project: {\n      title: 1,\n      year: 1,\n      pages: 1,\n      _id: 0,\n    },\n  },\n]);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"equivalent-sql-query",children:(0,r.jsx)(t.strong,{children:"Equivalent SQL Query"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"SELECT title, year, pages FROM books WHERE year>2010;\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"computed-fields-example-along-with-the-title--authors-also-output-the-count-of-authors-for-every-book-in-the-database",children:[(0,r.jsx)(t.strong,{children:"Computed Fields Example:"})," Along with the title & authors, also output the count of authors for every book in the database."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'db.books.aggregate([\n  {\n    $project: {\n      title: 1,\n      authors: 1,\n      authorCount: { $size: "$authors" },\n    },\n  },\n]);\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"exercise-",children:(0,r.jsx)(t.strong,{children:"Exercise \uD83D\uDE80"})}),"\n",(0,r.jsxs)(t.p,{children:["\uD83D\uDC50 Find books with more than 10 available copies.",(0,r.jsx)(t.br,{}),"\n","\uD83D\uDC50 Return only book titles and publication year.",(0,r.jsx)(t.br,{}),"\n","\uD83D\uDC50 Create a computed field ",(0,r.jsx)(t.code,{children:"stockStatus"}),': "In Stock" if available > 0, otherwise "Out of Stock".']}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.p,{children:["\uD83D\uDD39 ",(0,r.jsx)(t.strong,{children:"Next Up: Understanding $group and $sort!"})]})]})}function c(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);