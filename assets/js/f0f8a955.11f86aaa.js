"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["3159"],{5050:function(e,n,s){s.r(n),s.d(n,{default:()=>h,frontMatter:()=>a,metadata:()=>t,assets:()=>l,toc:()=>d,contentTitle:()=>i});var t=JSON.parse('{"id":"aggregation/CREATE-VIEW","title":"\uD83E\uDDB8 $merge","description":"In MongoDB, the $merge stage allows you to write the results of an aggregation pipeline into a new or existing collection. This is similar to the concept of \\"INSERT INTO ... SELECT\\" or \\"MERGE INTO\\" in SQL databases.","source":"@site/docs/50-aggregation/7-CREATE-VIEW.mdx","sourceDirName":"50-aggregation","slug":"/aggregation/CREATE-VIEW","permalink":"/sql-to-query-api-lab/docs/aggregation/CREATE-VIEW","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/50-aggregation/7-CREATE-VIEW.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 $lookup (JOINs in MongoDB)","permalink":"/sql-to-query-api-lab/docs/aggregation/JOIN"},"next":{"title":"\uD83C\uDFAF Summary","permalink":"/sql-to-query-api-lab/docs/summary"}}'),r=s("5893"),o=s("65");let a={},i="\uD83E\uDDB8 $merge",l={},d=[{value:"<strong>\uD83D\uDD39 Understanding $merge</strong>",id:"-understanding-merge",level:2},{value:"<strong>Key Features:</strong>",id:"key-features",level:3},{value:"<strong>\uD83D\uDD39 Syntax</strong>",id:"-syntax",level:2},{value:"<strong>\uD83D\uDD39 Example 1: Creating a Summary Collection</strong>",id:"-example-1-creating-a-summary-collection",level:2},{value:"<strong>Equivalent SQL Query</strong>",id:"equivalent-sql-query",level:3},{value:"<strong>\uD83D\uDD39 Example 2: Maintaining an Author Summary Table</strong>",id:"-example-2-maintaining-an-author-summary-table",level:2},{value:"<strong>SQL Equivalent</strong>",id:"sql-equivalent",level:3},{value:"\uD83D\uDC50 Challenge",id:"-challenge",level:2}];function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-merge",children:"\uD83E\uDDB8 $merge"})}),"\n",(0,r.jsxs)(n.p,{children:["In MongoDB, the ",(0,r.jsx)(n.strong,{children:"$merge"})," stage allows you to ",(0,r.jsx)(n.strong,{children:"write the results of an aggregation pipeline into a new or existing collection"}),'. This is similar to the concept of "INSERT INTO ... SELECT" or "MERGE INTO" in SQL databases.']}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-understanding-merge",children:(0,r.jsx)(n.strong,{children:"\uD83D\uDD39 Understanding $merge"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$merge"})," stage enables you to store aggregation results into a different collection. If the target collection doesn\u2019t exist, MongoDB will create it automatically."]}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:(0,r.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,r.jsxs)(n.p,{children:["\u2714\uFE0F Inserts new documents if they don\u2019t exist.\n\u2714\uFE0F Updates existing documents based on ",(0,r.jsx)(n.code,{children:"_id"})," or a specified field.\n\u2714\uFE0F Can replace, merge, or discard duplicate records.\n\u2714\uFE0F Useful for ",(0,r.jsx)(n.strong,{children:"ETL workflows, reporting tables, and maintaining summary data."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-syntax",children:(0,r.jsx)(n.strong,{children:"\uD83D\uDD39 Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{ $merge: {\n    into: "targetCollection",\n    on: "_id", // Field to match existing records\n    whenMatched: "merge", // Action when a match is found\n    whenNotMatched: "insert" // Action when no match is found\n} }\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"into"})})," \u2192 Specifies the target collection."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"on"})})," \u2192 Defines how documents are matched (default: ",(0,r.jsx)(n.code,{children:"_id"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"whenMatched"})})," \u2192 Specifies action when a document with the same key exists.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"merge"}),": Updates matching documents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"replace"}),": Replaces matching documents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"keepExisting"}),": Keeps the existing document unchanged."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fail"}),": Throws an error on duplicates."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"whenNotMatched"})})," \u2192 Specifies action when a match is not found.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"insert"}),": Inserts new documents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"discard"}),": Ignores unmatched documents."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fail"}),": Throws an error if a match is not found."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-example-1-creating-a-summary-collection",children:(0,r.jsx)(n.strong,{children:"\uD83D\uDD39 Example 1: Creating a Summary Collection"})}),"\n",(0,r.jsxs)(n.p,{children:["\uD83D\uDC49 Suppose we want to generate a collection that contains the ",(0,r.jsx)(n.strong,{children:"total number of books per genre"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $unwind: "$genres" },\n  { $group: { _id: "$genres", totalBooks: { $sum: 1 } } },\n  {\n    $merge: {\n      into: "genre_summary",\n      on: "_id",\n      whenMatched: "merge",\n      whenNotMatched: "insert",\n    },\n  },\n]);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"equivalent-sql-query",children:(0,r.jsx)(n.strong,{children:"Equivalent SQL Query"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"INSERT INTO genre_summary (genre, totalBooks)\nSELECT genre, COUNT(*) FROM books\nGROUP BY genre\nON DUPLICATE KEY UPDATE totalBooks = VALUES(totalBooks);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-example-2-maintaining-an-author-summary-table",children:(0,r.jsx)(n.strong,{children:"\uD83D\uDD39 Example 2: Maintaining an Author Summary Table"})}),"\n",(0,r.jsxs)(n.p,{children:["\uD83D\uDC49 We want to create an ",(0,r.jsx)(n.strong,{children:"author_stats"})," collection with the total number of books written by each author."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  { $unwind: "$authors" },\n  { $group: { _id: "$authors.name", totalBooks: { $sum: 1 } } },\n  {\n    $merge: {\n      into: "author_stats",\n      on: "_id",\n      whenMatched: "merge",\n      whenNotMatched: "insert",\n    },\n  },\n]);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sql-equivalent",children:(0,r.jsx)(n.strong,{children:"SQL Equivalent"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"INSERT INTO author_stats (authorName, totalBooks)\nSELECT authors.name, COUNT(*) FROM books\nGROUP BY authors.name\nON DUPLICATE KEY UPDATE totalBooks = VALUES(totalBooks);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-challenge",children:"\uD83D\uDC50 Challenge"}),"\n",(0,r.jsxs)(n.p,{children:["\uD83D\uDC50 Create a ",(0,r.jsx)(n.code,{children:"top_rated_books"})," collection that stores books with an average rating above 4.5."]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Answer"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.books.aggregate([\n  {\n    $lookup:\n      {\n        from: "reviews",\n        localField: "_id",\n        foreignField: "bookId",\n        as: "reviews"\n      }\n  }\n]);\n'})})]})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);