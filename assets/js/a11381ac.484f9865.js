"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["283"],{4341:function(e,i,n){n.r(i),n.d(i,{default:()=>c,frontMatter:()=>s,metadata:()=>a,assets:()=>o,toc:()=>g,contentTitle:()=>l});var a=JSON.parse('{"id":"aggregation/aggregation-intro","title":"\uD83D\uDCD8 Intro to Aggregation Pipelines","description":"What is an aggregation pipeline?","source":"@site/docs/50-aggregation/1-aggregation-intro.mdx","sourceDirName":"50-aggregation","slug":"/aggregation/aggregation-intro","permalink":"/sql-to-query-api-lab/docs/aggregation/aggregation-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/50-aggregation/1-aggregation-intro.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 Aggregation Pipelines","permalink":"/sql-to-query-api-lab/docs/category/-aggregation-pipelines"},"next":{"title":"\uD83D\uDC50 $match and $project","permalink":"/sql-to-query-api-lab/docs/aggregation/match-project"}}'),r=n("5893"),t=n("65");let s={},l="\uD83D\uDCD8 Intro to Aggregation Pipelines",o={},g=[{value:"What is an aggregation pipeline?",id:"what-is-an-aggregation-pipeline",level:3},{value:"Why use aggregation?",id:"why-use-aggregation",level:3},{value:"SQL vs. MongoDB Aggregation Pipeline",id:"sql-vs-mongodb-aggregation-pipeline",level:3},{value:"Basic structure of an aggregation pipeline",id:"basic-structure-of-an-aggregation-pipeline",level:3},{value:"Example: Aggregation pipeline overview",id:"example-aggregation-pipeline-overview",level:3},{value:"SQL query:",id:"sql-query",level:4},{value:"Equivalent MongoDB aggregation:",id:"equivalent-mongodb-aggregation",level:4}];function d(e){let i={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"-intro-to-aggregation-pipelines",children:"\uD83D\uDCD8 Intro to Aggregation Pipelines"})}),"\n",(0,r.jsx)(i.h3,{id:"what-is-an-aggregation-pipeline",children:"What is an aggregation pipeline?"}),"\n",(0,r.jsx)(i.p,{children:"The Aggregation Pipeline in MongoDB is a powerful framework for data processing and transformation. It allows you to perform operations like filtering, grouping, sorting, and reshaping data, similar to SQL queries but in a more flexible and scalable way."}),"\n",(0,r.jsxs)(i.p,{children:["In SQL, you achieve complex queries using ",(0,r.jsx)(i.code,{children:"SELECT"}),", ",(0,r.jsx)(i.code,{children:"WHERE"}),", ",(0,r.jsx)(i.code,{children:"GROUP BY"}),", ",(0,r.jsx)(i.code,{children:"HAVING"}),", and ",(0,r.jsx)(i.code,{children:"JOIN"})," statements. In MongoDB, aggregation pipelines allow you to achieve the same results by passing data through multiple ",(0,r.jsx)(i.strong,{children:"stages"}),", each performing a specific transformation."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"why-use-aggregation",children:"Why use aggregation?"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Efficient processing:"})," Aggregation pipelines process data within the database engine, reducing the need for client-side computations."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Scalability:"})," They're designed to handle large datasets efficiently."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Powerful transformations:"})," They enable complex data transformations, similar to ",(0,r.jsx)(i.code,{children:"GROUP BY"}),", ",(0,r.jsx)(i.code,{children:"JOIN"}),", and computed fields in SQL."]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"sql-vs-mongodb-aggregation-pipeline",children:"SQL vs. MongoDB Aggregation Pipeline"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"SQL Operation"}),(0,r.jsx)(i.th,{children:"MongoDB Equivalent"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"WHERE"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"$match"})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"SELECT column1, column2"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"$project"})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"ORDER BY"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"$sort"})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"GROUP BY"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"$group"})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"HAVING"})}),(0,r.jsxs)(i.td,{children:[(0,r.jsx)(i.code,{children:"$match"})," after ",(0,r.jsx)(i.code,{children:"$group"})]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"JOIN"})}),(0,r.jsx)(i.td,{children:(0,r.jsx)(i.code,{children:"$lookup"})})]})]})]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"basic-structure-of-an-aggregation-pipeline",children:"Basic structure of an aggregation pipeline"}),"\n",(0,r.jsxs)(i.p,{children:["An aggregation pipeline consists of multiple ",(0,r.jsx)(i.strong,{children:"stages"}),", where each stage processes and transforms the data before passing it to the next stage."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:" db.collection.aggregate([\n    { stage1 },\n    { stage2 },\n    { stage3 },\n    ...\n ])\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Each stage uses a specific ",(0,r.jsx)(i.strong,{children:"operator"})," (like ",(0,r.jsx)(i.code,{children:"$match"}),", ",(0,r.jsx)(i.code,{children:"$project"}),", or ",(0,r.jsx)(i.code,{children:"$group"}),") to manipulate the data."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"example-aggregation-pipeline-overview",children:"Example: Aggregation pipeline overview"}),"\n",(0,r.jsx)(i.h4,{id:"sql-query",children:"SQL query:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"SELECT title, available\nFROM books\nWHERE available > 5\nORDER BY available DESC;\n"})}),"\n",(0,r.jsx)(i.h4,{id:"equivalent-mongodb-aggregation",children:"Equivalent MongoDB aggregation:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"db.books.aggregate([\n  { $match: { available: { $gt: 5 } } },\n  { $project: { title: 1, available: 1, _id: 0 } },\n  { $sort: { available: -1 } },\n]);\n"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsxs)(i.p,{children:["Next, let's dive into individual stages, starting with ",(0,r.jsx)(i.code,{children:"$match"})," and ",(0,r.jsx)(i.code,{children:"$project"}),". \uD83D\uDE80"]})]})}function c(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);