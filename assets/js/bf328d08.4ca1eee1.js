"use strict";(self.webpackChunkdocusaurus_template_lab=self.webpackChunkdocusaurus_template_lab||[]).push([["8422"],{5561:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>s,metadata:()=>o,assets:()=>r,toc:()=>l,contentTitle:()=>d});var o=JSON.parse('{"id":"CRUD/UPDATE","title":"\uD83D\uDC50 UPDATE \u2192 updateOne(), updateMany()","description":"To modify existing documents, MongoDB provides:","source":"@site/docs/40-CRUD/5-UPDATE.mdx","sourceDirName":"40-CRUD","slug":"/CRUD/UPDATE","permalink":"/sql-to-query-api-lab/docs/CRUD/UPDATE","draft":false,"unlisted":false,"editUrl":"https://github.com/mongodb-developer/sql-to-query-api-lab/blob/main/docs/40-CRUD/5-UPDATE.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uD83D\uDC50 INSERT \u2192 insertOne() & DELETE \u2192 deleteOne()","permalink":"/sql-to-query-api-lab/docs/CRUD/INSERT-DELETE"},"next":{"title":"\uD83D\uDC50 Aggregation Pipelines","permalink":"/sql-to-query-api-lab/docs/category/-aggregation-pipelines"}}'),a=t("5893"),i=t("65");let s={},d="\uD83D\uDC50 UPDATE \u2192 updateOne(), updateMany()",r={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Example: Update a book",id:"example-update-a-book",level:2},{value:"Equivalent SQL query",id:"equivalent-sql-query",level:3},{value:"Upsert option",id:"upsert-option",level:2},{value:"Challenge",id:"challenge",level:2},{value:"\uD83D\uDC50 1. Update the pages of the book &quot;Treasure of the Sun&quot; to 449.",id:"-1-update-the-pages-of-the-book-treasure-of-the-sun-to-449",level:3}];function c(e){let n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-update--updateone-updatemany",children:"\uD83D\uDC50 UPDATE \u2192 updateOne(), updateMany()"})}),"\n",(0,a.jsx)(n.p,{children:"To modify existing documents, MongoDB provides:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".updateOne()"}),": Updates the first matching document."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".updateMany()"}),": Updates all matching documents."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"db.collection.updateOne(\n  { <query> },\n  { <update operation> },\n  { <options> }\n)\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"<query>"}),": Specifies which document to update"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"<update operation>"}),": Defines modifications using update operators like $set, $inc, etc."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"<options>"}),": (Optional) Allows additional configurations like upsert: true"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example-update-a-book",children:"Example: Update a book"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.reviews.updateOne(\n  { bookId: "0312979509" }, // <-- query\n  { $set: { rating: 5 } } // <-- update operation\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"equivalent-sql-query",children:"Equivalent SQL query"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE reviews SET rating = 5 WHERE bookId = '0312979509';\n"})}),"\n",(0,a.jsx)(n.h2,{id:"upsert-option",children:"Upsert option"}),"\n",(0,a.jsx)(n.p,{children:'Let\'s say we want to update a review in our database from "John" for the book "0312979509" by rating it 5 stars.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.reviews.updateOne(\n  { name: "John", bookId: "0312979509" },\n  { $set: { rating: 5 } }\n);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Suppose \"John\" had never posted a review for this book before. The above query won't really do anything.\nIn some cases, we may want to store a fresh new review based on the condition and updates mentioned in query.\nTo handle such scenarios in MongoDB, we don't have to write additional application code to achieve this. All we have to do is utilize the ",(0,a.jsx)(n.code,{children:"upsert"})," option."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'db.reviews.updateOne(\n  { name: "John", bookId: "0312979509" },\n  { $set: { rating: 5 } },\n  { upsert: true } //<-- option\n);\n'})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"Executing the above command will insert a fresh new document in the collection, like this:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"{\n  _id: ObjectId('679d...'),\n  bookId: '0312979509',\n  name: 'John',\n  rating: 5\n}\n"})})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"challenge",children:"Challenge"}),"\n",(0,a.jsx)(n.h3,{id:"-1-update-the-pages-of-the-book-treasure-of-the-sun-to-449",children:'\uD83D\uDC50 1. Update the pages of the book "Treasure of the Sun" to 449.'}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)("div",{children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'  db.books.updateOne(\n    {"title": "Treasure of the Sun"}, \n    {$set: {pages: 449}}\n  );\n'})})})]})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);